<UserControl x:Class="PRORAM.Views.RadarDevicesView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"        
        xmlns:views="clr-namespace:PRORAM.Views"
        mc:Ignorable="d"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:prism="http://prismlibrary.com/"
        xmlns:input="clr-namespace:System.Windows.Input;assembly=PresentationCore"                 
        prism:ViewModelLocator.AutoWireViewModel="True"        
        Background="Transparent"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        TextElement.FontWeight="Medium"
        TextElement.FontSize="14"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:smtx="clr-namespace:ShowMeTheXAML;assembly=ShowMeTheXAML" >

    <i:Interaction.Triggers>

        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding ConsultDevicesCommand}" />
        </i:EventTrigger>


        <prism:InteractionRequestTrigger SourceObject="{Binding ConfigurationChangeNotificationRequest}">
            <prism:PopupWindowAction IsModal="True" CenterOverAssociatedObject="True">
                <prism:PopupWindowAction.WindowStyle>
                    <Style TargetType="Window">
                        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
                        <Setter Property="ResizeMode" Value="NoResize"/>
                        <Setter Property="WindowStyle" Value="None"/>
                        <Setter Property="AllowsTransparency" Value="True"/>
                        <Setter Property="Background" Value="Transparent"/>
                    </Style>
                </prism:PopupWindowAction.WindowStyle>
                <prism:PopupWindowAction.WindowContent>
                    <views:ConfigurationView />
                </prism:PopupWindowAction.WindowContent>
            </prism:PopupWindowAction>
        </prism:InteractionRequestTrigger>

        <prism:InteractionRequestTrigger SourceObject="{Binding TXPowerRequest}">
            <prism:PopupWindowAction IsModal="True" CenterOverAssociatedObject="True">
                <prism:PopupWindowAction.WindowStyle>
                    <Style TargetType="Window">
                        <Setter Property="Width" Value="500"/>
                        <Setter Property="Height" Value="auto"/>
                        <Setter Property="ResizeMode" Value="NoResize"/>
                        <Setter Property="WindowStyle" Value="None"/>
                        <Setter Property="AllowsTransparency" Value="True"/>
                        <Setter Property="Background" Value="Transparent"/>
                    </Style>
                </prism:PopupWindowAction.WindowStyle>
                <prism:PopupWindowAction.WindowContent>
                    <views:PowerRadarView />
                </prism:PopupWindowAction.WindowContent>
            </prism:PopupWindowAction>
        </prism:InteractionRequestTrigger>

        <prism:InteractionRequestTrigger SourceObject="{Binding RaiseChannelFrecRequest}">
            <prism:PopupWindowAction IsModal="True" CenterOverAssociatedObject="True">
                <prism:PopupWindowAction.WindowStyle>
                    <Style TargetType="Window">
                        <Setter Property="Width" Value="550"/>
                        <Setter Property="Height" Value="310"/>
                        <Setter Property="ResizeMode" Value="NoResize"/>
                        <Setter Property="WindowStyle" Value="None"/>
                        <Setter Property="AllowsTransparency" Value="True"/>
                        <Setter Property="Background" Value="Transparent"/>
                    </Style>
                </prism:PopupWindowAction.WindowStyle>
                <prism:PopupWindowAction.WindowContent>
                    <views:ChannelFrecView />
                </prism:PopupWindowAction.WindowContent>
            </prism:PopupWindowAction>
        </prism:InteractionRequestTrigger>

        <prism:InteractionRequestTrigger SourceObject="{Binding ConfirmationRequest}">
            <prism:PopupWindowAction IsModal="True" CenterOverAssociatedObject="True">
                <prism:PopupWindowAction.WindowStyle>
                    <Style TargetType="Window">
                        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
                        <Setter Property="WindowStyle" Value="None"/>
                        <Setter Property="AllowsTransparency" Value="True"/>
                        <Setter Property="Background" Value="Transparent"/>
                    </Style>
                </prism:PopupWindowAction.WindowStyle>
                <prism:PopupWindowAction.WindowContent>
                    <views:PopupConfirmationView />
                </prism:PopupWindowAction.WindowContent>
            </prism:PopupWindowAction>
        </prism:InteractionRequestTrigger>


        <prism:InteractionRequestTrigger SourceObject="{Binding CustomPopupRequest2}">
            <prism:PopupWindowAction IsModal="True" CenterOverAssociatedObject="True">
                <prism:PopupWindowAction.WindowStyle>
                    <Style TargetType="Window">
                        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
                        <Setter Property="ResizeMode" Value="NoResize"/>
                        <Setter Property="WindowStyle" Value="None"/>
                        <Setter Property="AllowsTransparency" Value="True"/>
                        <Setter Property="Background" Value="Transparent"/>
                    </Style>
                </prism:PopupWindowAction.WindowStyle>
                <prism:PopupWindowAction.WindowContent>
                    <views:CustomPopupView />
                </prism:PopupWindowAction.WindowContent>
            </prism:PopupWindowAction>
        </prism:InteractionRequestTrigger>


        <prism:InteractionRequestTrigger SourceObject="{Binding RadarConfigurationNotificationRequest}">
            <prism:PopupWindowAction IsModal="True" CenterOverAssociatedObject="True">
                <prism:PopupWindowAction.WindowStyle>
                    <Style TargetType="Window">
                        <Setter Property="ResizeMode" Value="CanResize"/>
                        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
                        <Setter Property="Width" Value="auto"/>
                        <Setter Property="WindowStyle" Value="None"/>
                        <Setter Property="AllowsTransparency" Value="True"/>
                        <Setter Property="Background" Value="Transparent"/>
                    </Style>
                </prism:PopupWindowAction.WindowStyle>
                <prism:PopupWindowAction.WindowContent>
                    <views:RadarConfigurationView />
                </prism:PopupWindowAction.WindowContent>
            </prism:PopupWindowAction>
        </prism:InteractionRequestTrigger>
    </i:Interaction.Triggers>
    <!--Body-->
    <Border CornerRadius="5" BorderBrush="DimGray" BorderThickness="1" Background="{DynamicResource MaterialDesignPaper}" >
        <Grid >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
            </Grid.RowDefinitions>
            <ContentControl Grid.Row="0">
                <Border MouseDown="Border_MouseDown">
                    <materialDesign:ColorZone Mode="PrimaryDark"  Height="35" CornerRadius="5">
                        <Label Content="Dispositivos radar" Foreground="White" HorizontalAlignment="Center"></Label>
                    </materialDesign:ColorZone>
                </Border>
            </ContentControl>
            <ContentControl Grid.Row="1">
                <Border BorderThickness="5"  CornerRadius="10" Background="DimGray" Margin="10">
                    <StackPanel>
                        <Button Margin="10" HorizontalAlignment="Right" Content="Agregar radar" Command="{Binding RadarconfigurationNotificationCommand}"></Button>
                    </StackPanel>
                </Border>
            </ContentControl>
            <ContentControl Grid.Row="2">
                <DataGrid Margin="10" ItemsSource="{Binding RadarDevicesModel_, Mode=TwoWay}"  
                      SelectedItem="{Binding SRadarDevicesModel}"
                      Background="DimGray"                       
                      AlternatingRowBackground="Gray" 
                      CanUserAddRows="False"
                      AutoGenerateColumns="False"                      
                      Height="268"                       
                      ColumnWidth="Auto">
                    <DataGrid.Columns >
                        <DataGridTextColumn Width="auto" Header="Id" Binding="{Binding Path=Id}" IsReadOnly="True" />
                        <DataGridTextColumn Width="auto" Header="Nombre" Binding="{Binding Path=RadarName}" IsReadOnly="True" />
                       
                        <DataGridTextColumn Width="auto" Header="Coordenadas" Binding="{Binding Path=Coordinates}" IsReadOnly="True" />
                        <DataGridTemplateColumn Width="auto" Header="Estado conexión"  >
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <StackPanel>
                                        <StackPanel.Resources>
                                            <Style TargetType="Button" x:Key="ButtonStyle"  BasedOn="{StaticResource MaterialDesignRaisedButton}">
                                                <Setter Property="Background" Value="DimGray"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=IsSaveComplete}" Value="True">
                                                        <Setter Property="Background" Value="#2196f3" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Path=IsSaveComplete}" Value="False">
                                                        <Setter Property="Background" Value="DimGray" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </StackPanel.Resources>
                                        <Button  Style="{StaticResource ButtonStyle}"
                                                 Command="{Binding Path=DataContext.GetIdRadarCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                                 materialDesign:ButtonProgressAssist.IsIndicatorVisible="{Binding Path=IsSaving}"
                                                 materialDesign:ButtonProgressAssist.Value="{Binding Path=SaveProgress}" >

                                            <!-- simple example of toggling/animating pack icon with a data trigger-->
                                            <materialDesign:PackIcon Height="24" Width="24">
                                                <materialDesign:PackIcon.Style>
                                                    <Style TargetType="materialDesign:PackIcon" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                        <Setter Property="Kind" Value="PowerPlugOff" />
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding  Path=IsSaveComplete}" Value="True">
                                                                <Setter Property="Kind" Value="PowerPlug" />
                                                                <DataTrigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.8" />
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </DataTrigger.EnterActions>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </materialDesign:PackIcon.Style>
                                            </materialDesign:PackIcon>
                                        </Button>
                                    </StackPanel>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTemplateColumn Width="auto" Header="Radiando" >
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <StackPanel>
                                        <StackPanel.Resources>
                                            <Style TargetType="Button" x:Key="ButtonStyle"  BasedOn="{StaticResource MaterialDesignRaisedButton}">
                                                <Setter Property="Background" Value="DimGray"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=IsSaveCompleteT}" Value="True">
                                                        <Setter Property="Background" Value="#2196f3" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Path=IsSaveCompleteT}" Value="False">
                                                        <Setter Property="Background" Value="DimGray" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </StackPanel.Resources>
                                        <Button  Style="{StaticResource ButtonStyle}"
                                        Command="{Binding Path=DataContext.RadiationCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                        materialDesign:ButtonProgressAssist.IsIndicatorVisible="{Binding Path=IsSavingT}"
                                        materialDesign:ButtonProgressAssist.Value="{Binding Path=SaveProgressT}">
                                            <materialDesign:PackIcon Height="24" Width="24">
                                                <materialDesign:PackIcon.Style>
                                                    <Style TargetType="materialDesign:PackIcon" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                        <Setter Property="Kind" Value="PowerPlugOff" />
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding  Path=IsSaveCompleteT}" Value="True">
                                                                <Setter Property="Kind" Value="PowerPlug" />
                                                                <DataTrigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.8" />
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </DataTrigger.EnterActions>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </materialDesign:PackIcon.Style>
                                            </materialDesign:PackIcon>
                                        </Button>
                                    </StackPanel>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!--Acciones-->
                        <DataGridTemplateColumn Width="auto" Header="Acciones" >
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Menu IsMainMenu="False" Background="LightGray" Foreground="Black">
                                        <MenuItem Header="Opciones" Height="30" >
                                            <MenuItem Header="Configurar" Command="{Binding Path=DataContext.ConfigurationChangeCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"/>
                                            <MenuItem Header="Potencia" Command="{Binding Path=DataContext.TXPowerCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"/>
                                            <MenuItem Header="Canales de transmisión" Command="{Binding Path=DataContext.RaiseChannelFrecCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"/>
                                            <MenuItem Header="Remover" Command="{Binding Path=DataContext.ConfirmationCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"/>
                                        </MenuItem>
                                    </Menu>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>
            </ContentControl>
            <Separator Grid.Row="3"/>
            <ContentControl Grid.Row="4">
                <DockPanel Margin="10">
                    <Button Command="{Binding CancelCommand}" Content="Cerrar" Foreground="Black" Background="LightGray" HorizontalAlignment="Right" Margin="10"></Button>
                </DockPanel>
            </ContentControl>
        </Grid>
    </Border>
</UserControl>
